require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe PasswordResetsController do
  render_views

  describe "GET 'new'" do
    
    describe "for unsigned users" do
      
      it "should be successfull" do
        get :new
        response.should be_success
      end
      
      it "should have the right title" do
        get :new
        response.should have_selector('title', :content => "Password Reset") 
      end
      
      it "should have an email field" do
        get :new
        response.should have_selector("input[name='password_reset[email]']")
      end
    end
    
    describe "for signed users" do
      
      before(:each) do
        @user = test_sign_in(Factory(:user))
      end
      
      it "should redirect to the home page" do
        get :new
        response.should redirect_to(root_path)
      end
    end
  end
  
  describe "GET 'show'" do
    
      before(:each) do
        @user = Factory(:user)
        @password_reset = Factory(:password_reset, :email => @user.email)
      end
      
      it "should be successfull" do
        get :show, :id => @password_reset
        response.should be_success
      end
      
      it "should have the right title" do
        get :show, :id => @password_reset
        response.should have_selector('title', :content => "Password Reset") 
      end
    
      it "should display the right message to the user" do
        get :show, :id => @password_reset
        response.should have_selector('b', :content => "#{@password_reset.email}")
      end
  end
  
  describe "GET 'edit'" do
    
      before(:each) do
        @user = Factory(:user)
        @password_reset = Factory(:password_reset, :email => @user.email)
      end
      
      describe "with an invalid token" do
        it "should redirect to the home page" do
          get :edit, {:id => @password_reset, :token => ""}
          response.should redirect_to(root_path)
        end
      end
      
      describe "with an inactive request" do
        it "should redirect to the home page" do
          @password_reset.active = false
          @password_reset.save
          get :edit, {:id => @password_reset, :token => @password_reset.token}
          response.should redirect_to(root_path)
        end
      end
      
      describe "with a signed in user" do
        it "should redirect to the home page" do
          test_sign_in(@user)
          get :edit, {:id => @password_reset, :token => @password_reset.token}
          response.should redirect_to(root_path)
        end
      end
      
      describe "success" do
        
        it "should be successfull" do
          get :edit, {:id => @password_reset, :token => @password_reset.token}
          response.should be_success
        end
      
        it "should have the right title" do
          get :edit, {:id => @password_reset, :token => @password_reset.token}
          response.should have_selector('title', :content => "Password Reset") 
        end
        
        it "should have a hidden field with the token" do
          get :edit, {:id => @password_reset, :token => @password_reset.token}
          response.should have_selector("input[name='password_reset[token]']")
        end
    
        it "should have a user password field" do
          get :edit, {:id => @password_reset, :token => @password_reset.token}
          response.should have_selector("input[name='user[password]']")
        end
      
        it "should have a user password confirmation field" do
          get :edit, {:id => @password_reset, :token => @password_reset.token}
          response.should have_selector("input[name='user[password_confirmation]']")
        end
      end
  end
  
  describe "POST 'create'" do
    
    describe "for unsigned users" do
      
      describe "failure" do
        
        before(:each) do
          @badattr = {:email => "nonexisting@email.com"}
        end
        
        it "should not create the password reset request" do
          lambda do
            post :create, :password_reset => @badattr
          end.should_not change(PasswordReset, :count)
        end
        
        it "should have the right title" do
          post :create, :password_reset => @badattr
          response.should have_selector('title', :content => "Password Reset")
        end
        
        it "should redirect to the 'new' page" do
          post :create, :password_reset => @badattr
          response.should render_template('new')
        end
      end
        
      describe "success" do
        
        before(:each) do
          user = Factory(:user)
          @attr = {:email => user.email}
        end
        
        it "should create the password reset request" do
          lambda do
            post :create, :password_reset => @attr
          end.should change(PasswordReset, :count).by(1)
        end
        
        it "should redirect to the request show page" do
          post :create, :password_reset => @attr
          response.should redirect_to(password_reset_path(assigns(:password_reset)))
        end
        
        it "should have a flash message" do
          post :create, :password_reset => @attr
          flash[:success].should =~ /your request has been processed successfully/i
        end
        
        it "should send a confirmation email to the user" do
          lambda do
            post :create, :password_reset => @attr
          end.should change(ActionMailer::Base.deliveries, :count).by(1)
        end
      end
    end
    
    describe "for signed users" do
      
      before(:each) do
        user = test_sign_in(Factory(:user))
        @attr = {:email => user.email}
      end
      
      it "should not create the password reset request" do
        lambda do
          post :create, :password_reset => @attr
        end.should_not change(PasswordReset, :count)
      end
      
      it "should redirect to the home page" do
        post :create, :password_reset => @attr
        response.should redirect_to(root_path)
      end
    end
  end
  
  describe "PUT 'update'" do
    
    before(:each) do
      @user = Factory(:user)
      @password_reset = Factory(:password_reset, :email => @user.email)
      @new_password = "anewpassword"
    end
    
    describe "for unsigned users" do
      
      describe "failure" do
        
        describe "with a wrong token" do

          it "should not update the user password" do
            lambda do
              put :update, :id => @password_reset.id, :password_reset => { :token => "" },
                        :user => { :password => @new_password, :password_confirmation => @new_password }
              @user.reload
            end.should_not change(@user, :encrypted_password)
          end

          it "should redirect to the home page" do
            put :update, :id => @password_reset.id, :password_reset => { :token => "" },
                      :user => { :password => @new_password, :password_confirmation => @new_password }
            response.should redirect_to(root_path)
          end
        end

        describe "with a wrong password" do

          it "should not update the user password" do
            lambda do
              put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token },
                        :user => { :password => @new_password, :password_confirmation => "differentpassword" }
              @user.reload
            end.should_not change(@user, :encrypted_password)
          end

          it "should render the 'edit' page" do
            put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token },
                      :user => { :password => @new_password, :password_confirmation => "differentpassword" }
            response.should render_template('edit')
          end
        end
        
        describe "with an inactive password reset request" do
          
          before(:each) do
            @password_reset.active = false
            @password_reset.save
          end
          
          it "should not update the user password" do
            lambda do
              put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token },
                        :user => { :password => @new_password, :password_confirmation => @new_password }
              @user.reload
            end.should_not change(@user, :encrypted_password)
          end

          it "should redirect to the home page" do
            put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token },
                      :user => { :password => @new_password, :password_confirmation => @new_password }
            response.should redirect_to(root_path)
          end
        end
      end
      
      
      describe "success" do
        
        it "should update the password given valid attributes" do
          lambda do
            put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token }, 
                          :user => { :password => @new_password, :password_confirmation => @new_password }
            @user.reload
          end.should change(@user, :encrypted_password)
        end
        
        it "should allow the user to authenticate itself with the new password" do
          put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token }, 
                        :user => { :password => @new_password, :password_confirmation => @new_password }
          User.authenticate(@user.email, @new_password).should == @user
        end
        
        it "should disable the password reset request" do
          put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token }, 
                        :user => { :password => @new_password, :password_confirmation => @new_password }
          @password_reset.reload.should_not be_active
        end
  
        it "should sign in the user" do
          put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token },
                    :user => { :password => @new_password, :password_confirmation => @new_password }
          controller.current_user?(@user).should be_true
        end
        
        it "should redirect to the home page" do
          put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token },
                    :user => { :password => @new_password, :password_confirmation => @new_password }
          response.should redirect_to(root_path)
        end
      end
    end
    
    describe "for signed users" do
      
      before(:each) do
        test_sign_in(@user)
      end
      
      it "should not update the user password" do
        lambda do
          put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token },
                    :user => { :password => @new_password, :password_confirmation => @new_password }
          @user.reload
        end.should_not change(@user, :encrypted_password)
      end
      
      it "should redirect to the home page" do
         put :update, :id => @password_reset.id, :password_reset => { :token => @password_reset.token },
                    :user => { :password => @new_password, :password_confirmation => @new_password }
        response.should redirect_to(root_path)
      end
    end
  end
end
